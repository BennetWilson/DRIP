{"version":3,"sources":["utils/queries.js","pages/Home.js","utils/mutations.js","pages/Matchup.js","pages/Vote.js","pages/NotFound.js","App.js","index.js"],"names":["QUERY_TECH","gql","QUERY_MATCHUPS","Home","useQuery","fetchPolicy","loading","data","matchupList","matchups","className","map","matchup","to","pathname","_id","tech1","tech2","CREATE_MATCHUP","CREATE_VOTE","Matchup","techList","tech","useState","formData","setFormData","navigate","useNavigate","useMutation","createMatchup","error","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","variables","console","onSubmit","onChange","type","Vote","id","useParams","createVote","handleVote","techNum","tech1_votes","tech2_votes","onClick","NotFound","location","useLocation","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c223bb0.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_TECH = gql`\r\n  query tech {\r\n    tech {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_MATCHUPS = gql`\r\n  query matchups($_id: String) {\r\n    matchups(_id: $_id) {\r\n      _id\r\n      tech1\r\n      tech2\r\n      tech1_votes\r\n      tech2_votes\r\n    }\r\n  }\r\n`;\r\n","import { Link } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_MATCHUPS } from '../utils/queries';\r\n\r\nconst Home = () => {\r\n  const { loading, data } = useQuery(QUERY_MATCHUPS, {\r\n    fetchPolicy: \"no-cache\"\r\n  });\r\n\r\n  const matchupList = data?.matchups || [];\r\n\r\n  return (\r\n    <div className=\"card bg-white card-rounded w-50\">\r\n      <div className=\"card-header bg-dark text-center\">\r\n        <h1>Welcome to Tech Matchup!</h1>\r\n      </div>\r\n      <div className=\"card-body m-5\">\r\n        <h2>Here is a list of matchups you can vote on:</h2>\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          <ul className=\"square\">\r\n            {matchupList.map((matchup) => {\r\n              return (\r\n                <li key={matchup._id}>\r\n                  <Link to={{ pathname: `/matchup/${matchup._id}` }}>\r\n                    {matchup.tech1} vs. {matchup.tech2}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      <div className=\"card-footer text-center m-3\">\r\n        <h2>Ready to create a new matchup?</h2>\r\n        <Link to=\"/matchup\">\r\n          <button className=\"btn btn-lg btn-danger\">Create Matchup!</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_MATCHUP = gql`\r\n  mutation createMatchup($tech1: String!, $tech2: String!) {\r\n    createMatchup(tech1: $tech1, tech2: $tech2) {\r\n      _id\r\n      tech1\r\n      tech2\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_VOTE = gql`\r\n  mutation createVote($_id: String!, $techNum: Int!) {\r\n    createVote(_id: $_id, techNum: $techNum) {\r\n      _id\r\n      tech1\r\n      tech2\r\n      tech1_votes\r\n      tech2_votes\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { QUERY_TECH } from '../utils/queries';\r\nimport { CREATE_MATCHUP } from '../utils/mutations';\r\n\r\nconst Matchup = () => {\r\n  const { loading, data } = useQuery(QUERY_TECH);\r\n\r\n  const techList = data?.tech || [];\r\n\r\n  const [formData, setFormData] = useState({\r\n    tech1: 'JavaScript',\r\n    tech2: 'JavaScript',\r\n  });\r\n  let navigate = useNavigate();\r\n\r\n  const [createMatchup, { error }] = useMutation(CREATE_MATCHUP);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await createMatchup({\r\n        variables: { ...formData },\r\n      });\r\n\r\n      navigate(`/matchup/${data.createMatchup._id}`);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n    setFormData({\r\n      tech1: 'JavaScript',\r\n      tech2: 'JavaScript',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"card bg-white card-rounded w-25\">\r\n      <div className=\"card-header bg-dark text-center\">\r\n        <h1>Let's create a matchup!</h1>\r\n      </div>\r\n      <div className=\"card-body m-5\">\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          <form onSubmit={handleFormSubmit}>\r\n            <label>Tech 1: </label>\r\n            <select name=\"tech1\" onChange={handleInputChange}>\r\n              {techList.map((tech) => {\r\n                return (\r\n                  <option key={tech._id} value={tech.name}>\r\n                    {tech.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n            <label>Tech 2: </label>\r\n            <select name=\"tech2\" onChange={handleInputChange}>\r\n              {techList.map((tech) => {\r\n                return (\r\n                  <option key={tech._id} value={tech.name}>\r\n                    {tech.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n            <button className=\"btn btn-danger\" type=\"submit\">\r\n              Create Matchup!\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n      {error && <div>Something went wrong...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Matchup;\r\n","import { useQuery, useMutation } from '@apollo/client';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { CREATE_VOTE } from '../utils/mutations';\r\nimport { QUERY_MATCHUPS } from '../utils/queries';\r\n\r\nconst Vote = () => {\r\n  let { id } = useParams();\r\n\r\n  const { loading, data } = useQuery(QUERY_MATCHUPS, {\r\n    variables: { _id: id },\r\n  });\r\n\r\n  const matchup = data?.matchups || [];\r\n\r\n  const [createVote, { error }] = useMutation(CREATE_VOTE);\r\n\r\n  const handleVote = async (techNum) => {\r\n    try {\r\n      await createVote({\r\n        variables: { _id: id, techNum: techNum },\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card bg-white card-rounded w-50\">\r\n      <div className=\"card-header bg-dark text-center\">\r\n        <h1>Here is the matchup!</h1>\r\n      </div>\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <div className=\"card-body text-center mt-3\">\r\n          <h2>\r\n            {matchup[0].tech1} vs. {matchup[0].tech2}\r\n          </h2>\r\n          <h3>\r\n            {matchup[0].tech1_votes} : {matchup[0].tech2_votes}\r\n          </h3>\r\n          <button className=\"btn btn-info\" onClick={() => handleVote(1)}>\r\n            Vote for {matchup[0].tech1}\r\n          </button>{' '}\r\n          <button className=\"btn btn-info\" onClick={() => handleVote(2)}>\r\n            Vote for {matchup[0].tech2}\r\n          </button>\r\n          <div className=\"card-footer text-center m-3\">\r\n            <br></br>\r\n            <Link to=\"/\">\r\n              <button className=\"btn btn-lg btn-danger\">\r\n                View all matchups\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {error && <div>Something went wrong...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Vote;\r\n","import React from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction NotFound() {\r\n  let location = useLocation();\r\n  return (\r\n    <div className=\"card bg-white card-rounded w-50\">\r\n      <div className=\"card-header bg-dark text-center\">\r\n        <h1>\r\n          No match for <code>{location.pathname}</code>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\nimport Home from './pages/Home';\r\nimport Matchup from './pages/Matchup';\r\nimport Vote from './pages/Vote';\r\nimport NotFound from './pages/NotFound';\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\r\n          <Routes>\r\n            <Route \r\n              path=\"/\" \r\n              element={<Home />}\r\n            />\r\n            <Route \r\n              path=\"/matchup\" \r\n              element={<Matchup />}\r\n            />\r\n            <Route \r\n              path=\"/matchup/:id\" \r\n              element={<Vote />}\r\n            />\r\n            <Route \r\n              path=\"*\"\r\n              element={<NotFound />}\r\n            />\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}